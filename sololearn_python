#####classes __init__ 

#In an __init__ method, self.attribute can therefore be used to set the initial value of an instance's attributes.
#The __init__ method is called the class constructor
class Cat:
  def __init__(self, color, legs):
    self.color = color
    self.legs = legs

felix = Cat("ginger", 4)
print(felix.color)

#output: ginger

class Dog:
  def __init__(self, name, color):
    self.name = name
    self.color = color

  def bark(self):
    print("Woof!")

fido = Dog("Fido", "brown")
print(fido.name)
fido.bark()

#output:
# Fido
# Woof!


########Inheritance 

##A class that inherits from another class is called a subclass.
#A class that is inherited from is called a superclass.
#If a class inherits from another with the same attributes or methods, it overrides them.

class Wolf: 
    def __init__(self, name, color):
        self.name = name
        self.color = color

    def bark(self):
        print("Grr...")

class Dog(Wolf):
    def bark(self):
        print("Woof")

husky = Dog("Max", "grey")
husky.bark()

#output: Woof

class A:
  def method(self):
    print("A method")
    
class B(A):
  def another_method(self):
    print("B method")
    
class C(B):
  def third_method(self):
    print("C method")
    
c = C()
c.method()
c.another_method()
c.third_method()

# output:
# A method
# B method
# C method


## The function super is a useful inheritance-related function that refers to the parent class. 
##It can be used to find the method with a certain name in an object's superclass.

class A:
  def spam(self):
    print(1)

class B(A):
  def spam(self):
    print(2)
    super().spam()
            
B().spam()

output:
2
1
