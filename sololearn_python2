#Functional Programming
# def apply_twice(func, arg):
#    return func(func(arg))

def add_five(x):
   return x + 5

print(apply_twice(add_five, 10))

output:20

###Lambdas

def my_func(f, arg):
  return f(arg)

my_func(lambda x: 2*x*x, 5)


def polynomial(x):
    return x**2 + 5*x + 4
print(polynomial(-4))

#lambda
print((lambda x: x**2 + 5*x + 4) (-4))

## map The function map takes a function and an iterable as arguments, 
##and returns a new iterable with the function applied to each argument. 


nums = [11, 22, 33, 44, 55]

result = list(map(lambda x: x+5, nums))
print(result)


output:[16, 27, 38, 49, 60]

## filter  The function filter filters an iterable by removing items that don't 
## match a predicate (a function that returns a Boolean). 

nums = [11, 22, 33, 44, 55]
res = list(filter(lambda x: x%2==0, nums))
print(res)

output: [22, 44]

# #####sets are created using curly braces, or the set function. They share some functionality with lists,
# ## such as the use of in to check whether they contain a particular item.

num_set = {1, 2, 3, 4, 5}
word_set = set(["spam", "eggs", "sausage"])

print(3 in num_set)
print("spam" not in word_set)

output:
True
False


nums = {1, 2, 1, 3, 1, 4, 5, 6}
print(nums)
nums.add(-7)
nums.remove(3)
print(nums)

output:
{1, 2, 3, 4, 5, 6}
{1, 2, 4, 5, 6, -7}


# Sets can be combined using mathematical operations.
# The union operator | combines two sets to form a new one containing items in either. 
# The intersection operator & gets items only in both. 
# The difference operator - gets items in the first set but not in the second. 
# The symmetric difference operator ^ gets items in either set, but not both

first = {1, 2, 3, 4, 5, 6}
second = {4, 5, 6, 7, 8, 9}

print(first | second)
print(first & second)
print(first - second)
print(second - first)
print(first ^ second)

output:
1, 2, 3, 4, 5, 6, 7, 8, 9}
{4, 5, 6}
{1, 2, 3}
{8, 9, 7}
{1, 2, 3, 7, 8, 9}


######Data structure

# When to use a dictionary:
# - When you need a logical association between a key:value pair.
# - When you need fast lookup for your data, based on a custom key.
# - When your data is being constantly modified. Remember, dictionaries are mutable.

# When to use the other types:
# - Use lists if you have a collection of data that does not need random access. Try to choose lists when you need a simple, iterable collection that is modified frequently.
# - Use a set if you need uniqueness for the elements. 
# - Use tuples when your data cannot change. 
