######iterators
####An iterator is an object that contains a countable number of values.
####Technically, in Python, an iterator is an object which implements the iterator protocol,
#### which consist of the methods __iter__() and __next__().
mytuple = ("apple","banana","cherry")
myit = iter(mytuple)
print(myit)
print(next(myit))
print(next(myit))
print(next(myit))

output: 
<tuple_iterator object at 0x10dc2b780>
apple
banana
cherry

mystr = "banana"
myit = iter(mystr)
print(myit)
print(next(myit))
print(next(myit))
print(next(myit))

######output:
<str_iterator object at 0x10a0a5860>
b
a
n

###loop through an iterator

for x in mytuple:
	print (x)
for x in mystr:
	print (x)

output:
apple
banana
cherry
b
a
n
a
n
a
#######The for loop actually creates in iterator object and executes the next() method for each loop.

class mynumbers:
	def __iter__(self):
		self.a = 1
		return self 
	def __next__(self):
		if self.a <= 20:
			x = self.a
			self.a +=1
			return x
		else:
			raise StopIteration
myclass = mynumbers()
myiter = iter(myclass)

for x in myiter:
	print (x)


########creat an iterator, StopIteration
